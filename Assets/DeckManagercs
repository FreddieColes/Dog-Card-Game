using UnityEngine;
using System.Collections.Generic;
using System;

public class DeckManager : MonoBehaviour
{
    public CardDatabase cardDatabase;
    public List<Card> deck = new List<Card>();
    public List<Card> hand = new List<Card>();
    public List<Card> discardPile = new List<Card>();
    public int maxHandSize = 5;
    public event Action OnCardDrawn;
    public event Action<Card> OnCardPlayed;
    private CardGamePlayer cardGamePlayer;

    void Start()
    {
        cardGamePlayer = FindObjectOfType<CardGamePlayer>();
        if (cardGamePlayer == null)
        {
            Debug.LogError("CardGamePlayer not found in the scene.");
        }
    }

    public bool CanDrawCard()
    {
        int currentHandSize = cardGamePlayer ? cardGamePlayer.GetHandSize() : 0;
        bool handNotFull = currentHandSize < maxHandSize;
        bool cardsAvailable = deck.Count > 0 || discardPile.Count > 0;
        Debug.Log($"CanDrawCard check:");
        Debug.Log($"  Current hand size: {currentHandSize}");
        Debug.Log($"  Max hand size: {maxHandSize}");
        Debug.Log($"  Hand not full: {handNotFull}");
        Debug.Log($"  Cards in deck: {deck.Count}");
        Debug.Log($"  Cards in discard: {discardPile.Count}");
        Debug.Log($"  Cards available: {cardsAvailable}");
        bool canDraw = handNotFull && cardsAvailable;
        Debug.Log($"  Can draw: {canDraw}");
        return canDraw;
    }

    public Card DrawCard()
    {
        int currentHandSize = cardGamePlayer ? cardGamePlayer.GetHandSize() : 0;
        Debug.Log($"Attempting to draw card. Before draw - Hand: {currentHandSize}/{maxHandSize}, Deck: {deck.Count}, Discard: {discardPile.Count}");
        if (deck.Count == 0 && discardPile.Count > 0)
        {
            ReshuffleDiscardPile();
        }
        if (deck.Count > 0 && currentHandSize < maxHandSize)
        {
            Card drawnCard = deck[0];
            deck.RemoveAt(0);
            hand.Add(drawnCard); // Add the drawn card to the hand
            OnCardDrawn?.Invoke();
            Debug.Log($"Drew card: {drawnCard.Name}. After draw - Hand: {hand.Count}/{maxHandSize}, Deck: {deck.Count}, Discard: {discardPile.Count}");
            return drawnCard;
        }
        Debug.LogWarning($"Failed to draw card. Hand: {currentHandSize}/{maxHandSize}, Deck: {deck.Count}, Discard: {discardPile.Count}");
        return null;
    }

    public void PlayCard(Card card)
    {
        if (hand.Contains(card))
        {
            hand.Remove(card);
            discardPile.Add(card);
            OnCardPlayed?.Invoke(card);
            Debug.Log($"Card played: {card.Name}. Hand: {hand.Count}/{maxHandSize}, Deck: {deck.Count}, Discard: {discardPile.Count}");
        }
        else
        {
            Debug.LogWarning($"Attempted to play card {card.Name} that is not in hand.");
        }
    }

    public void InitializeDeck(List<Card> initialDeck)
    {
        deck = new List<Card>(initialDeck);
        hand.Clear();
        discardPile.Clear();
        ShuffleDeck();
        Debug.Log($"Deck initialized with {deck.Count} cards.");
    }

    public void ShuffleDeck()
    {
        System.Random rng = new System.Random();
        int n = deck.Count;
        while (n > 1)
        {
            n--;
            int k = rng.Next(n + 1);
            Card value = deck[k];
            deck[k] = deck[n];
            deck[n] = value;
        }
    }

    public void DiscardHand()
    {
        discardPile.AddRange(hand);
        hand.Clear();
        Debug.Log($"Hand discarded. Discard pile now has {discardPile.Count} cards.");
    }

    private void ReshuffleDiscardPile()
    {
        Debug.Log($"Reshuffling discard pile. Discard: {discardPile.Count}");
        deck.AddRange(discardPile);
        discardPile.Clear();
        ShuffleDeck();
        Debug.Log($"After reshuffle. Deck: {deck.Count}, Discard: {discardPile.Count}");
    }
}